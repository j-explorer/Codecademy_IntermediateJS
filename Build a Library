/*
 Instructions for the code below:

In this project you will create a parent class named Media with three subclasses: Book, Movie, and CD. 
These three subclasses have the following properties and methods: ...

If youâ€™re looking for a challenge, try to create the four classes without using the steps below.  

class Media {
  constructor(title, ratings){
  this._title = title;
  this._isCheckedOut = false;
  this._ratings = [];
  }

  get title () {
    return this._title;
  }

  get isCheckedOut () {
    return this._isCheckedOut;
  }

  get ratings () {
    return this._ratings;
  }
}

class Book extends Media {
  constructor(title, ratings, author, pages) {
    super(title);
    this._ratings = ratings;
    this._author = author;
    this._pages = pages;
  }

  get author () {
    return this._author;
  }

  get pages () {
    return this._pages;
  }
}


class Movie extends Media {
  constructor(title, ratings, director, runTime) {
    super(title);
    this._ratings = ratings;
    this._director = director;
    this._runTime = runTime;
    
  }

  get director () {
    return this._director;
  }

  get runTime () {
    return this._runTime;
  }
}

 class Cd extends Media {
  constructor(title, ratings, songs, artist) {
    super(title);
    this._ratings = ratings;
    this._songs = songs;
    this._artist = artist;
    }

    get songs () {
      return this._songs;
    }

    get artist () {
      return this._artist;
    }
 } */



class Media {
  constructor(title){
  this._title = title;
  this._isCheckedOut = false;
  this._ratings = [];
  }

  get title () {
    return this._title;
  }

  get isCheckedOut () {
    return this._isCheckedOut;
  }

  get ratings () {
    return this._ratings;
  }

set isCheckOut (newCheckOut) {
  this.isCheckOut = newCheckOut;
}

  toggleCheckOutStatus () {
  this._isCheckOut = !this._isCheckOut;
}

  getAverageRating () {
    const ratingSum = this._ratings.reduce(
  (previousValue, currentValue) => previousValue + currentValue,
  0);
    return (ratingSum/this._ratings.length);
  }

  addRating (rating) {
  this._ratings.push(rating);
  }
}


class Book extends Media {
  constructor(title, author, pages) {
    super(title);
    this._author = author;
    this._pages = pages;
  }

  get author () {
    return this._author;
  }

  get pages () {
    return this._pages;
  }
}


class Movie extends Media {
  constructor(title, director, runTime) {
    super(title);
    this._director = director;
    this._runTime = runTime;
    
  }

  get director () {
    return this._director;
  }

  get runTime () {
    return this._runTime;
  }
}

 class Cd extends Media {
  constructor(title, songs, artist) {
    super(title);
    this._songs = songs;
    this._artist = artist;
    }

    get songs () {
      return this._songs;
    }

    get artist () {
      return this._artist;
    }
 }

//Instances

const historyOfEverything = new Book('A Short History of Nearly Everything', 'Bill Bryson', 544);

const speed = new Movie('Speed', 'Jan de Bont', 116);

historyOfEverything.toggleCheckOutStatus();
historyOfEverything.addRating(4);
historyOfEverything.addRating(5);
historyOfEverything.addRating(5);

speed.toggleCheckOutStatus();
speed.addRating(1);
speed.addRating(1);
speed.addRating(5);

console.log(historyOfEverything.getAverageRating());

console.log(speed.getAverageRating());
